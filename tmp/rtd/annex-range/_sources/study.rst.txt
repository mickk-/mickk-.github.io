Designing a Range Abstraction
=============================

.. rubric:: How to read this study

This study does not have to be read in strict order, although it is suggested to lead with :doc:`study/iteration`. This
introduction of sorts outlines the background, motivation, and scope of the study. Quite importantly it also sets up
some of the terminology.

.. toctree::
    :maxdepth: 2
    :hidden:

    study/iteration

From then on the reader can start from any topic and follow cross-references when necessary. In lieu of a reading guide,
it is suggested to take a look at the study structure for inspiration:

Criticism
^^^^^^^^^

Each 'Criticism' chapter presents some of the shortcomings of an existing iteration abstraction:

.. toctree::
    :maxdepth: 1

    study/state_of_the_art/iterators
    study/state_of_the_art/alexandrescu_ranges

Design elements
^^^^^^^^^^^^^^^

Each 'Design element' chapter independently focuses on one design aspect of iteration abstractions, listing and
commenting on the trade-offs to be made. They are listed in rough order of importance with the more fundamental topics
coming first:

.. toctree::
    :maxdepth: 2

    study/elements/work
    study/elements/representation

    study/elements/traversal
    study/elements/termination
    study/elements/types

.. rubric:: Conventions

Most of the pseudo-code contained in this study takes the form of C++17 extended with concepts\ [#concepts]_. Other
languages are also used when discussing the existing iteration abstractions of their respective ecosystem.

.. _designers_tradeoff:

.. rubric:: The designer's trade-off

Trade-offs are a recurring motif throughout this study. This is so because the designer of an iteration abstraction,
which is to say in practical terms the designer of a range ecosystem, acts as a broker between the implementers (i.e.
range authors) and their users (i.e. range consumers). Consequently the stricter the requirements on a particular range
concept or interface, the heavier the burden on range authors to satisfy it; but all the same the more guarantees for
range consumers to rely on. Conversely laxer requirements allow authors to implement a larger class of ranges; which
consumers can only use in more limited ways.

As a concrete example of the designer's trade-off suppose that we, with our iteration abstraction designer hat firmly
on, wish to mandate that all ranges must be able to be queried for their length. Under this scheme the consequences are
immediate:

- non-finite ranges are ruled out which, depending on our mood, is perhaps not the most serious of offences
- more concerningly however in the same breath we also ruled out possibly-finite ranges but which length cannot be
  computed ahead of time, such as a range over network-produced elements

Just as equally though, whenever a consumer ends up with a range in this scheme they can take for granted that it is
finite. Notably this makes it easy to tell that a simple loop over that range will terminate---a powerful guarantee in
any Turing-complete language. Should we remove our onerous requirement to enable more interesting ranges, then in all
likelihood all loops would need to be audited for termination.

All things considered this study does not aim to be prescriptive. On many occasions it qualifies choices in the
comparative: 'stricter', 'laxer', 'more precisely', and so on but these should not be understood as absolute mandates.
Rather they are hints that there exists here a continuum of behaviour. The careful reader should consider the
consequences of picking the opposite decision as well. In the end we always leave the final choice of direction in which
to tip the scales in the hands of the would-be iteration abstraction designer.

We leave :tradeoff:`reminders` in our conclusions to link the reader back to here.

------

.. [#concepts] Concepts are specified by n4674_.

.. _n4674: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4674.pdf
