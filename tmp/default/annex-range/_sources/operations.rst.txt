Operations & functions
======================

All operations and accompanying functions are provided by :file:`annex/range/range.hpp`.

Operations
~~~~~~~~~~

Operations are the fundamental functionality that models of `Context` and its refinements must implement. Unless
otherwise specified, each operation has constant-time complexity with respect to the number of notional elements of the
underlying range.

.. _lax:
.. rubric:: Strict and lax ranges
.. warning:: |experimental-feature|

Ranges which fulfil all complexity requirements are known as *strict* ranges, while ranges which
only fulfil these requirements in an amortised manner are known as *lax* ranges.

.. _operations:
.. rubric:: `Context` operations

.. namespace:: ::annex::range

.. |non-past-the-end| replace:: *pos* must not be past-the-end.

.. var:: constexpr functors::equal_pos const& equal_pos

    .. function:: Types{Ctx, Pos, Sent} constexpr bool operator()(Ctx& ctx, Pos const& pos, Sent const& sent) const

        Check if *pos* and *sent* stand for the same notional element, or if both are past-the-end.

.. var:: constexpr functors::peek_at const& peek_at

    .. function:: Types{Ctx, Pos} constexpr auto operator()(Ctx& ctx, Pos const& pos) const

        Non-destructively read element at *pos*. Repeated peeks at the same position must have identical results,
        unless separated by a potentially destructive read.

        :preconditions:
            |non-past-the-end|

        :seealso:
            `at`: potentially destructive variant

.. var:: constexpr functors::at const& at

    .. function:: Types{Ctx, Pos} constexpr auto operator()(Ctx& ctx, Pos const& pos) const

        Read element at *pos*. This is a potentially destructive operation, meaning that reads beyond the first may
        yield a different result (e.g. a moved-from value). Nonetheless all reads must result in defined behavior as
        long as preconditions are satisfied.

        :preconditions:
            |non-past-the-end|

        :seealso:
            `peek_at`: non-destructive variant

.. var:: constexpr functors::incr const& incr

    .. function:: Types{Ctx, Pos} constexpr void operator()(Ctx& ctx, Pos& pos) const

        Increment *pos*.

        .. seealso::
            `next`
              the non-mutating counterpart

        :preconditions:
            |non-past-the-end|

.. _bidirectional-operations:
.. rubric:: `BidirectionalContext` operations

.. var:: constexpr functors::decr const& decr

    .. function:: Types{Ctx, Sent} constexpr void operator()(Ctx& ctx, Sent& sent) const

        Decrement *sent*. Where a `Rng rng; <Range>` defines a :math:`\left[rng.from, rng.to\right)` half-open interval,
        all positions except ``rng.from`` are guaranteed to have a predecessor.

        .. seealso::
            `prev`
              the non-mutating counterpart

        :preconditions:
            There must be a valid position before *sent*.

.. _random-access-operations:
.. rubric:: `RandomAccessContext` operations

.. var:: constexpr functors::step const& step

    .. function:: Types{Ctx, Pos, Offset} constexpr void operator()(Ctx& ctx, Pos& pos, Offset const& offset) const

        Step *pos* forwards or backwards *offset* times.

        .. seealso::
            `offset`
              the non-mutating counterpart

        :preconditions:
            *offset* must lead to a result which lies within :math:`\left[rng.to, rng.from\right]` with respect to the
            underlying `Rng rng; <Range>`.

.. var:: constexpr functors::difference const& difference

    .. function:: Types{Ctx, Pos} constexpr auto operator()(Ctx& ctx, Pos const& a, Pos const& b) const

        Compute the difference between *a* and *b*.

.. rubric:: `Saveable` operation

.. var:: constexpr functors::save const& save

    .. warning:: |experimental-feature|

    .. function:: template<typename Ctx, typename... Pos> \
                  constexpr auto operator()(Ctx const& ctx, Pos const&... pos) const

        Save current iteration state as given by *ctx* and *pos...*. The result is a `Decomposable` variable mirroring
        the arguments::

            auto [saved_ctx, saved_a, saved_b, ...] = save(ctx, a, b, ...);

        Using and operating over the original or the resulting context together with their respective associated
        positions should not affect the other. The fresh positions are to be used with the fresh context (this is
        relaxed for `Copyable` positions, see :ref:`copy-save`).

        A position can be saved at most once at a time unless it is `Copyable`::

            // only valid if a can be copied
            auto [saved_ctx, saved_a1, saved_a2] = save(ctx, a, a)

        In the case of a context and associated positions which all model `Copyable`, saving is equivalent to copying.

        :complexity:
          There is no complexity requirement on this operation.

Functions
~~~~~~~~~

These functions are provided for convenience and are not implemented by ranges.

.. _bounds-checked:

Some functions are *bounds-checked*, meaning that in addition to the range context argument necessary for range
operations they additionally accept position arguments to prevent precondition violations (e.g. to avoid incrementing a
position beyond the past-the-end position). Alternatively, the range context and the bounding positions can be passed
together as a range argument::

    auto rng = ...;
    auto& [ctx, from, to] = rng;

    auto length = distance(ctx, from, to);

    // equivalent to the above
    auto length = distance(rng);

.. |bounds-checked| replace:: This is a `bounds-checked`_ function.

.. include:: /autodoc/base/base.txt
