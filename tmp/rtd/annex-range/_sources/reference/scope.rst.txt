Scope
=====

.. warning:: |write-up|

This library is narrow in purpose. In order to best manage expectations we outline which things are within scope and
provided, which are within scope but left for future work, and finally what is out of scope.

Self-contained range abstractions are a staple feature of programming languages as seen with |Python iterators|_, `D
ranges`_, |Rust iterators|_, or |C# enumerators|_. In C++ however the closest analogue concepts of `iterators`_ have
been found wanting at times.

This library is a tabula rasa approach at the problems that range abstractions aim to solve, with the double goal of
producing a defense of position-based ranges as well as a practically-minded API.

.. _Python iterators: https://docs.python.org/3/library/stdtypes.html#typeiter
.. _D ranges: https://dlang.org/phobos/std_range.html
.. _Rust iterators: https://doc.rust-lang.org/std/iter/index.html
.. _C# enumerators: https://msdn.microsoft.com/en-us/library/78dfe2yb%28v=vs.110%29.aspx
.. _iterators: http://en.cppreference.com/w/cpp/concept/Iterator

The users
---------

When evaluating the merits and shortcomings of a range abstraction, it's not often made explicit who are its users and
how it is intended they use the abstraction. This library considers two types of users:

* implementers (i.e. range authors), who write code that provides instances or models that conform to the range
  abstraction
* consumers (typically, but not just end users), who write code that uses and consumes those instances

It is the author's opinion that most range abstractions at large put too much emphasis on end users, with the net result
that implementing a model of a range is considered somewhat of an expert's task. This approach makes sense when a range
library aims to be as complete as possible, with the expectation that end users will pick and choose the right tools
from the library to match their needs. Furthermore if end users are also expected to outnumber expert implementers then
putting the burden on experts makes sense, resulting in an economy of complexity.

On the other hand it is also the author's opinion and experience that aiming for completeness is a tall order as the
need for new kinds of range frequently arises in end-user code. When existing libraries cannot fulfil that need this
leads to a a frustrating situation where the end users either have to use shortcuts or enlist the help of experts,
rather than tackle their need by authoring a range themselves.

Just as equally it is also the author's opinion that if a range library wants to be as complete as possible, then we
should lend to the range implementers as much consideration as we do to end users. The easier it is to implement a
range, the faster the features land.

.. admonition:: study

    This is an intrinsic balancing act, which roots are briefly scrutinied in :ref:`designers_tradeoff` as part of
    the study.

A hybrid approach
-----------------

Two concerns have dominated the discussion so far:

- The need to package related information together in one object (e.g. the filtering predicate of a filtering range).
  This concern is oriented around construction and argument passing, including copy semantics ('saving' in Alexandrescu
  terminology). Correct lifetime semantics is a staple of C++ programming that is not as readily alleviated as it can be
  in another language. Garbage collection can give great mileage to double-ended ranges together with range saving, but
  that is not an option here.

- The need to maintain functionality parity with iterators, in particular with regards to bidirectional and
  random-access algorithms.

This library aims to defend and implement a dual interface approach, with a self-contained range object concept that
comes with individual position objects. End users need only be concerned with an interface that deals in self-contained
ranges, while range implementers will focus on the position interfaces.

Current features
----------------

- :doc:`concepts` for ranges and their positions
- common but simple enough :doc:`source ranges <sources>`
- core composite ranges (`map`, `filter`, `zip`, `flatten`, `concat`)
- some additional composite ranges (available as :doc:`transformations`, :doc:`compositions`, or :doc:`arrangements`)
- simple range consumption patterns (`loop`, :ref:`collects`, :ref:`folds`)
- a last resort adapter for iterator-based code: `as_iterators`

Possible future work
--------------------

- `concat` and `flatten` **must** be usable
- Tailored composite range capabilities. (This may be connected to the previous item.)
- More work on the connection between 'eager' algorithms as range consumers and 'lazy'/on-demand online algorithms as
  composite ranges (e.g. in-place sort vs online sort).
- More elaborate source ranges.
- More :doc:`consumers` (e.g. algorithms).
- A solid vocabulary of composite ranges to cover enough ground in several areas, e.g.:

  * typical variadic composition patterns (e.g. round-robin)
  * typical but non-fundamental composite patterns, e.g. moved/decayed, enumerate
  * intersperse/join
- An IEnumerable (or begin/end) equivalent for things that are not necessarily ranges themselves, but come with an
  associated range. A lot of code that is currently written against `Range` (including the composite ranges and
  algorithms) should really be written against this putative concept. E.g. `flatten` already does this to an extent, see
  `AsRange`.
- Known-finite ranges (algorithms should be found first).

Out of scope
------------

- most things having to do with :ref:`internal iteration <external-iteration>`, e.g. await/yield (but see `coro`)
- an equivalent to the notion of output iterator, which should be unnecessary: ranges are meant to be used with
  :doc:`consumers`
- containers (although `as_range` and `container` serve to construct a view into a container or to adapt a container)
- clever syntax (operators, member functions), at least for now

The great big bikeshed
----------------------

In vague descending order of importance:

- terminology and include layout for sources, composites (transformations/compositions/arrangements), consumers, etc.
- naming convention for composite ranges: e.g. is `reverse(arg) <reverse>` appropriate even though it creates a separate
  range without modifying its argument? any answer would also apply to well-known quantities such as `map`
- `group`:

  * what to call the `group` elements: *groupings*, *runs*, *groups*
  * what to call the first argument of `group`: a key function, a projection function
  * whether `group` elements should carry their computed criterion around
- whether `integers\<Num\> <integers>` and `ints` should be function-like constants, or constant ranges
